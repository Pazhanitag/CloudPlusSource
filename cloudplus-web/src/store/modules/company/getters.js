export default {
  createCompany: (state, getters, rootState, rootGetters) => ({
    name: state.company.name,
    parentId: rootGetters['userAuth/userProfile'].companyId,
    type: state.company.type,
    website: state.company.website,
    logoBase64: state.company.logoBase64,
    supportSiteUrl: state.company.supportSite,
    controlPanelSiteUrl: state.company.controlPanelSiteUrl,
    email: state.company.email,
    phoneNumber: state.company.phoneNumber,
    streetAddress: state.company.streetAddress,
    city: state.company.city,
    zipCode: state.company.zipCode,
    state: state.company.state,
    country: state.company.country,
    brandColorPrimary: state.company.primaryBrandColor.hex,
    brandColorSecondary: state.company.secondaryBrandColor.hex,
    brandColorText: state.company.textColor.hex,
    domains: state.company.domains,
    catalogId: state.company.catalogId,
    user: rootGetters['user/createUser'],
  }),
  updateCompany: state => ({
    id: state.company.id,
    name: state.company.name,
    website: state.company.website,
    logoBase64: state.company.logoBase64,
    supportSiteUrl: state.company.supportSite,
    controlPanelSiteUrl: state.company.controlPanelSiteUrl,
    email: state.company.email,
    phoneNumber: state.company.phoneNumber,
    streetAddress: state.company.streetAddress,
    city: state.company.city,
    zipCode: state.company.zipCode,
    state: state.company.state,
    country: state.company.country,
    primaryBrandColor: state.company.primaryBrandColor,
    brandColorPrimary: state.company.primaryBrandColor.hex,
    brandColorSecondary: state.company.secondaryBrandColor.hex,
    brandColorText: state.company.textColor.hex,
    catalogId: state.company.catalogId,
    domains: state.company.newDomains === undefined ? [] : state.company.newDomains,
  }),
  generalInformation: state => ({
    id: state.company.id,
    type: state.company.type,
    name: state.company.name,
    billingType: state.company.billingType,
    catalogId: state.company.catalogId,
    tags: state.company.tags,
  }),
  contactInformation: state => ({
    email: state.company.email,
    phoneNumber: state.company.phoneNumber,
    country: state.company.country,
    state: state.company.state,
    city: state.company.city,
    zipCode: state.company.zipCode,
    streetAddress: state.company.streetAddress,
  }),
  domainInformation: state => ({
    domains: state.company.domains,
    newDomains: state.company.newDomains === undefined ? [] : state.company.newDomains,
    website: state.company.website,
    supportSite: state.company.supportSite,
    controlPanelSiteUrl: state.company.controlPanelSiteUrl,
    websiteSameAsPrimaryDomain: state.company.websiteSameAsPrimaryDomain,
    domainInformation: state.company.domainInformation,
  }),
  brandingInformation: state => ({
    logoUrl: state.company.logoUrl,
    primaryBrandColor: state.company.primaryBrandColor,
    secondaryBrandColor: state.company.secondaryBrandColor,
    textColor: state.company.textColor,
  }),
  onboardingInformation: state => ({
    sendWelcomeLetter: state.company.sendWelcomeLetter,
    sendOnboardingInformation: state.company.sendOnboardingInformation,
    sendInformationAboutLatestServices: state.company.sendInformationAboutLatestServices,
    sendInformationAboutDiscounts: state.company.sendInformationAboutDiscounts,
    sendMiscNewsAndInformation: state.company.sendMiscNewsAndInformation,
  }),
  companyDomains: state => state.company.domains,
  companies: state => state.companies,
  pagedUsers: state => state.pagedUsers,
  companyUsers: state => state.companyUsers,
  externalSignupForm: (state, getters, rootState, rootGetters) => ({
    name: state.company.name,
    parentId: state.company.parentId,
    type: state.company.accountType,
    website: state.company.website,
    logoBase64: state.company.logoBase64,
    supportSiteUrl: state.company.supportSite,
    controlPanelSiteUrl: state.company.controlPanelSiteUrl,
    email: state.company.email,
    phoneNumber: state.company.phoneNumber,
    streetAddress: state.company.streetAddress,
    city: state.company.city,
    zipCode: state.company.zipCode,
    state: state.company.state,
    country: state.company.country,
    brandColorPrimary: state.company.primaryBrandColor.hex,
    brandColorSecondary: state.company.secondaryBrandColor.hex,
    brandColorText: state.company.textColor.hex,
    domains: [{ isPrimary: true, name: state.company.domain }],
    user: rootGetters['user/createUser'],
    domain: state.company.domain,
    accountType: state.company.accountType,
    parentUniqueIdentifier: state.company.parentUniqueIdentifier,
    websiteSameAsPrimaryDomain: state.company.websiteSameAsPrimaryDomain,
  }),
  companyForProductConfiguration: state => ({
    domains: state.company.domains,
    name: state.company.name,
    firstName: state.productCustomerCompany.firstName,
    lastName: state.productCustomerCompany.lastName,
    phoneNumber: state.company.phoneNumber,
    address1: state.company.streetAddress,
    address2: '',
    city: state.company.city,
    country: state.company.country,
    state: state.company.state,
    postalCode: state.company.zipCode,
  }),
  createProductCustomerCompany: state => ({
    domain: state.productCustomerCompany.domain,
    name: state.company.name,
    firstName: state.productCustomerCompany.firstName,
    lastName: state.productCustomerCompany.lastName,
    phoneNumber: state.company.phoneNumber,
    address1: state.company.streetAddress,
    address2: state.productCustomerCompany.address2,
    city: state.company.city,
    country: state.company.country,
    state: state.company.state,
    postalCode: state.company.zipCode,
  }),
};
