export default {
  companyForCustomerConfiguration: state => ({
    domains: state.customer.domains,
    name: state.customer.name,
    firstName: state.customer.firstName,
    lastName: state.customer.lastName,
    phoneNumber: state.customer.phoneNumber,
    email: state.customer.email,
    address1: state.customer.address1,
    address2: state.customer.address2,
    city: state.customer.city,
    country: state.customer.country,
    state: state.customer.stateCode,
    postalCode: state.customer.postalCode,
  }),
  createCustomerCompany: state => ({
    companyId: state.customer.companyId,
    domain: state.customer.domain,
    email: state.customer.email,
    companyName: state.customer.name,
    firstName: state.customer.firstName,
    lastName: state.customer.lastName,
    addressLine1: state.customer.address1,
    addressLine2: state.customer.address2,
    city: state.customer.city,
    state: state.customer.stateCode,
    country: state.customer.countryCode,
    phoneNumber: state.customer.phoneNumber.replace(/\/|-| /g, ''),
    postalCode: state.customer.postalCode,
  }),
  customerAddress: state => ({
    phoneNumber: state.customer.phoneNumber.replace(/\/|-| /g, ''),
    addressLine1: state.customer.address1,
    addressLine2: state.customer.address2,
    city: state.customer.city,
    country: state.customer.countryCode,
    state: state.customer.stateCode,
    postalCode: state.customer.postalCode,
  }),
  resendTxtRecordsModel: (state, getters, rootState, rootGetters) => ({
    domain: state.resendTxtRecordsModel.domain,
    email: state.resendTxtRecordsModel.email,
    companyId: rootGetters['userAuth/companyId'],
  }),
  company: state => ({
    email: state.company.email,
    domains: state.company.domains,
  }),
  domainUsers: state => index => state.company.domains[index].users,
  additionalDomain: state => ({
    office365CustomerId: state.company.office365CustomerId,
    companyId: state.company.companyId,
    domain: state.selectedDomain,
    email: state.company.email,
  }),
  userLicenceAssignment: (state, getters, rootState, rootGetters) => ({
    companyId: rootGetters['userAuth/companyId'],
    cloudPlusProductIdentifier: state.userLicence.cloudPlusProductIdentifier,
    userPrincipalName: `${rootState.user.user.userName}@${rootState.user.user.domain}`,
    displayName: rootState.user.user.displayName,
    firstName: rootState.user.user.firstName,
    lastName: rootState.user.user.lastName,
    usageLocation: state.userLicence.usageLocation,
    city: rootState.user.user.city,
    country: rootState.user.user.countryCode,
    phoneNumber: rootState.user.user.phoneNumber,
    postalCode: rootState.user.user.zipCode,
    state: rootState.user.user.state,
    streetAddress: rootState.user.user.streetAddress,
    userRoles: state.userLicence.userRoles,
    password: state.userLicence.password,
  }),
  multiUserLicenceEdit: (state, getters, rootState, rootGetters) => ({
    companyId: rootGetters['userAuth/companyId'],
    users: state.multiUserLicence.users.map(user =>
      ({ userPrincipalName: user.userPrincipalName, password: user.password })),
    userRoles: state.multiUserLicence.userRoles,
    cloudPlusProductIdentifier: state.multiUserLicence.cloudPlusProductIdentifier,
  }),
  allSelectedLicenseUsers: state => state.multiUserLicence.users,
  allSelectedLicenseUsersEmails: state =>
    state.multiUserLicence.users.map(user => user.userPrincipalName),
  selectedOffice365Roles: state => state.multiUserLicence.userRoles,
  selectedOffice365ProductName: state => state.multiUserLicence.cloudPlusProductName,
  clearMultiuserLicenceForms: state => state.clearMultiuserLicenceForms,
  userLicenceRestore: (state, getters, rootState) => ({
    companyId: rootState.user.user.companyId,
    userPrincipalName: `${rootState.user.user.userName}@${rootState.user.user.domain}`,
  }),
  userLicenceRemove: (state, getters, rootState) => ({
    companyId: rootState.user.user.companyId,
    userPrincipalName: `${rootState.user.user.userName}@${rootState.user.user.domain}`,
  }),
  changeUserLicence: (state, getters, rootState) => ({
    companyId: rootState.user.user.companyId,
    userPrincipalName: `${rootState.user.user.userName}@${rootState.user.user.domain}`,
    removeCloudPlusProductIdentifier: state.userLicence.previouslyAssignedProductIdentifier,
    assignCloudPlusProductIdentifier: state.userLicence.cloudPlusProductIdentifier,
    userRoles: state.userLicence.userRoles,
  }),
  transitionData: state => state.transitionData,
};
